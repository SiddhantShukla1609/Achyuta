# -*- coding: utf-8 -*-
"""Diabetes_minor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/171fvrRr5IYKpTI0LcH9skvG3u4i9bKfW
"""

# Importing the dependencies
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.feature_selection import SelectKBest, f_classif
from imblearn.over_sampling import SMOTE  # For handling class imbalance
from sklearn.svm import SVC

# DATA COLLECTION AND ANALYSIS
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

# Check for null values (optional)
diabetes_dataset.isnull().sum()

# Seperating the data and labels
X = diabetes_dataset.drop(columns='Outcome', axis=1)
y = diabetes_dataset['Outcome']

#feature engineering Adding Polynomial Features (degree 2)
poly = PolynomialFeatures(degree=2,interaction_only=False,include_bias=False)
X_poly = poly.fit_transform(X)

# Data Standardization
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_poly)  # Scaled polynomial features

# Handling Class Imbalance using SMOTE
smote = SMOTE(random_state=2)
X_resampled, y_resampled = smote.fit_resample(X_scaled, y)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, stratify=y_resampled, random_state=2)

# Hyperparameter tuning using GridSearchCV with class weights
param_grid = {
    'C': [0.1, 1, 10, 100],
    'gamma': [1, 0.1, 0.01, 0.001],
    'kernel': ['rbf', 'poly'],
    'class_weight': ['balanced']
}

# StratifiedKFold for cross-validation
cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=2)

# Using GridSearchCV to find the best parameters
classifier = GridSearchCV(svm.SVC(), param_grid, refit=True, cv=cv, verbose=2)
classifier.fit(X_train, y_train)

# Best parameters found by GridSearchCV
print("Best Parameters:", classifier.best_params_)

# Model evaluation
# Accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(y_train, X_train_prediction)
print("ACCURACY SCORE OF THE TRAINING DATA: ", training_data_accuracy)

# Accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(y_test, X_test_prediction)
print("ACCURACY SCORE OF THE TEST DATA: ", test_data_accuracy)

# Example dataset (make sure to load your actual dataset here)
# Assume you already have a dataset with the same 8 features
X = np.array([[6, 148, 72, 35, 0, 33.6, 0.627, 50],
              [1, 85, 66, 29, 0, 26.6, 0.351, 31],
              [8, 183, 64, 0, 0, 23.3, 0.672, 32],
              # Add more rows from your diabetes dataset
              ])
y = np.array([1, 0, 1])  # Example target values (1 = diabetic, 0 = not)

# Splitting the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the SVC model using these 8 features
classifier = SVC(kernel='linear')
classifier.fit(X_train, y_train)

# Make predictions on the test data
y_pred = classifier.predict(X_test)

# Now, use the input system with the 8 features for prediction
pregnancies = int(input("Enter the total number of your pregnancy periods: "))
glucose = int(input("Enter your glucose level: "))
Bp = int(input("Enter your blood pressure: "))
skin_thickness = int(input("Enter your skin thickness: "))
insulin = int(input("Enter your insulin amount of body: "))
bmi = float(input("Enter your BMI: "))
diabetes_pedigree_function = float(input("Enter your diabetes pedigree function: "))
age = int(input("Enter your age: "))

input_data = (pregnancies, glucose, Bp, skin_thickness, insulin, bmi, diabetes_pedigree_function, age)

# Convert input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Standardize the input data using the same scaler as for training
std_data = scaler.transform(input_data_reshaped)
print("Standardized data:", std_data)

# Make prediction
prediction = classifier.predict(std_data)

if prediction[0] == 0:
    print("The person is not suffering from diabetes.")
else:
    print("The person is suffering from diabetes.")

